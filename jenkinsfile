pipeline {
    agent any

    tools {
        jdk 'jdk21'
        nodejs 'node24'
    }
    environment {
        SONARQUBE_ENV = 'sonar-server'  
        SONAR_TOKEN_CREDENTIALS = 'sonar-token' 
    }
    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Git Checkout") {
            steps {
                git 'https://github.com/pradeeshan/Food-App.git'
            }
        }

        stage("Install NPM Dependencies") {
            steps {
                bat "npm install"
            }
        }

        stage("Test") {
            failFast true
            parallel {
                stage("Unit Tests") {
                    steps {
                        bat "npm run test:unit"
                    }
                }
                stage("Integration Tests") {
                    steps {
                        bat "npm run test:integration"
                    }
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    bat '''
                    docker run --rm ^
                      -e SONAR_HOST_URL=http://host.docker.internal:9000 ^
                      -v "%cd%:/usr/src" ^
                      sonarsource/sonar-scanner-cli ^
                      -Dsonar.projectKey=zomato ^
                      -Dsonar.sources=.
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                waitForQualityGate abortPipeline: true, credentialsId: "${SONAR_TOKEN_CREDENTIALS}"
            }
        }

        stage("Build Docker Image") {
            steps {
                bat "docker build -t zomato ."
            }
        }

        stage("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        bat "docker tag zomato pradeeshan/zomato:latest"
                        bat "docker push pradeeshan/zomato:latest"
                    }
                }
            }
        }

        stage("Deploy to Container") {
            steps {
                script {
                    bat '''
                    docker stop zomato || echo "No container to stop"
                    docker rm zomato || echo "No container to remove"
                    '''
                    bat "docker run -d --name zomato -p 3000:3000 pradeeshan/zomato:latest"
                }
            }
        }
    }
}
